/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");

const port = 3000;
let todos = [];
let todoId = 0;
const app = express();

app.use(bodyParser.json());

// 1.GET /todos - Retrieve all todo items
app.get("/todos", (req, res) => {
  res.status(200).json(todos);
});

// 2.GET /todos/:id - Retrieve a specific todo item by ID
app.get("/todos/:id", (req, res) => {
  const { id } = req.params;
  const currentTodo = todos?.find((todo) => todo?.id === +id);
  if (currentTodo?.id) {
    res.status(200).json(currentTodo);
  } else {
    res.status(404).json({ error: `Todo not found with id ${id}` });
  }
});

// 3. POST /todos - Create a new todo item
app.post("/todos", (req, res) => {
  const { title = "", description = "", completed = false } = req?.body;

  // check for required params
  if (title.length <= 0 || description.length <= 0) {
    res.status(400).json({ error: "Title or Description is not provided" });
  }
  const id = ++todoId;
  const newTodo = { id, title, description, completed };
  todos.push(newTodo);

  res.status(201).json({ id });
});

// 4. PUT /todos/:id - Update an existing todo item by ID
app.put("/todos/:id", (req, res) => {
  const { id } = req.params;
  const currentTodo = todos?.find((todo) => todo?.id === +id);
  const { title, description, completed } = req?.body;

  if (currentTodo?.id) {
    if (title) {
      currentTodo.title = title;
    }
    if (description) {
      currentTodo.description = title;
    }
    if (completed !== undefined) {
      currentTodo.completed = completed;
    }
    res.status(200).json(currentTodo);
  } else {
    res.status(404).json({ error: `Todo not found with id ${id}` });
  }
});

// 5. DELETE /todos/:id - Delete a todo item by ID
app.delete("/todos/:id", (req, res) => {
  const { id } = req.params;
  const currentTodo = todos?.find((todo) => todo?.id === +id);
  if (currentTodo?.id) {
    todos = todos?.filter((todo) => todo?.id !== +id);
    res.status(200).json({ message: "Todo deleted successfully" });
  } else {
    res.status(404).json({ error: `Todo not found with id ${id}` });
  }
});

app.listen(port, () => {
  console.log(`Running on ${port}`);
});

module.exports = app;
